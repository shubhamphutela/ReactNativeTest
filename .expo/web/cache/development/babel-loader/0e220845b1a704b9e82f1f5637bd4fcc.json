{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Calendar, CalendarList } from 'react-native-calendars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      clickCount: 1,\n      searchText: 'Text'\n    };\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadFont\",\n    value: function loadFont() {\n      return _regeneratorRuntime.async(function loadFont$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadFont();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Text, {\n          style: styles.lableText,\n          children: \"Click test\"\n        }), _jsx(Pressable, {\n          style: styles.clickButton,\n          onPress: function onPress() {\n            _this2.setState({\n              clickCount: _this2.state.clickCount + 1\n            });\n          },\n          children: _jsx(Text, {\n            children: \"Click me\"\n          })\n        }), _jsxs(View, {\n          style: {\n            height: 56,\n            justifyContent: 'center',\n            borderColor: '#ccc',\n            borderWidth: 2,\n            padding: 5,\n            borderRadius: 8,\n            marginTop: 15,\n            marginBottom: 15\n          },\n          children: [_jsx(Text, {\n            children: \"Number of button clicks\"\n          }), _jsx(Text, {\n            children: this.state.clickCount\n          })]\n        }), _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.lableText,\n            children: \"Search Test\"\n          }), _jsx(TextInput, {\n            placeholder: \"Search\",\n            onChangeText: function onChangeText(text) {\n              return _this2.setState({\n                searchText: text\n              });\n            },\n            style: {\n              height: 56,\n              justifyContent: 'center',\n              borderColor: '#ccc',\n              borderWidth: 2,\n              padding: 5,\n              borderRadius: 8,\n              marginTop: 5\n            }\n          })]\n        }), _jsxs(View, {\n          style: {\n            height: 80,\n            justifyContent: 'center',\n            borderColor: '#ccc',\n            borderWidth: 2,\n            padding: 5,\n            borderRadius: 8,\n            marginTop: 15,\n            marginBottom: 15\n          },\n          children: [_jsx(Text, {\n            children: \"Searched text \"\n          }), _jsx(Text, {\n            children: this.state.searchText\n          })]\n        }), _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.lableText,\n            children: \"Message Box\"\n          }), _jsx(TextInput, {\n            placeholder: \"Search\",\n            onChangeText: function onChangeText(text) {\n              return _this2.setState({\n                searchText: text\n              });\n            },\n            style: {\n              height: 56,\n              justifyContent: 'center',\n              borderColor: '#ccc',\n              borderWidth: 2,\n              padding: 5,\n              borderRadius: 8,\n              marginTop: 5\n            }\n          })]\n        }), _jsx(Calendar, {\n          minDate: '2012-05-10',\n          maxDate: '2022-05-30',\n          onDayPress: function onDayPress(day) {\n            console.log('selected day', day);\n          },\n          markedDates: {\n            '2012-05-16': {\n              selected: true,\n              marked: true,\n              selectedColor: 'blue'\n            },\n            '2012-05-17': {\n              marked: true\n            },\n            '2012-05-18': {\n              marked: true,\n              dotColor: 'red',\n              activeOpacity: 0\n            },\n            '2012-05-19': {\n              disabled: true,\n              disableTouchEvent: true\n            }\n          },\n          onDayLongPress: function onDayLongPress(day) {\n            console.log('selected day', day);\n          },\n          monthFormat: 'yyyy MM',\n          onMonthChange: function onMonthChange(month) {\n            console.log('month changed', month);\n          },\n          hideArrows: true,\n          renderArrow: function renderArrow(direction) {\n            return _jsx(Arrow, {});\n          },\n          hideExtraDays: true,\n          disableMonthChange: true,\n          firstDay: 1,\n          hideDayNames: true,\n          showWeekNumbers: true,\n          onPressArrowLeft: function onPressArrowLeft(subtractMonth) {\n            return subtractMonth();\n          },\n          onPressArrowRight: function onPressArrowRight(addMonth) {\n            return addMonth();\n          },\n          disableArrowLeft: true,\n          disableArrowRight: true,\n          disableAllTouchEventsForDisabledDays: true,\n          renderHeader: function renderHeader(date) {},\n          enableSwipeMonths: true\n        }), _jsx(StatusBar, {\n          style: \"auto\"\n        })]\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 15\n  },\n  lableText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  clickButton: {\n    backgroundColor: '#FFA978',\n    height: 56,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#fff'\n  }\n});","map":{"version":3,"sources":["D:/TestProject/App.js"],"names":["StatusBar","React","Calendar","CalendarList","App","props","state","clickCount","searchText","fontsLoaded","loadFont","styles","container","lableText","clickButton","setState","height","justifyContent","borderColor","borderWidth","padding","borderRadius","marginTop","marginBottom","text","day","console","log","selected","marked","selectedColor","dotColor","activeOpacity","disabled","disableTouchEvent","month","direction","subtractMonth","addMonth","date","Component","StyleSheet","create","flex","backgroundColor","fontSize","fontWeight","alignItems","color"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, Pressable, TextInput } from 'react-native';\nimport { Calendar, CalendarList } from 'react-native-calendars';\n\n\nexport default class App extends React.Component {\n\n  state = {\n    clickCount: 1,\n    searchText: 'Text'\n  };\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      fontsLoaded: false,\n    }\n  }\n  async loadFont() {\n    // await Font.loadAsync({\n    //   'Regular': require('./assets/Fonts/'),\n    // });\n    // this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this.loadFont();\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.lableText}>Click test</Text>\n        <Pressable style={styles.clickButton} onPress={() => { this.setState({ clickCount: this.state.clickCount + 1 }) }}>\n          <Text>Click me</Text>\n        </Pressable>\n\n        <View style={{ height: 56, justifyContent: 'center', borderColor: '#ccc', borderWidth: 2, padding: 5, borderRadius: 8, marginTop: 15, marginBottom: 15 }}>\n          <Text>Number of button clicks</Text>\n          <Text >{this.state.clickCount}</Text>\n        </View>\n        <View>\n          <Text style={styles.lableText}>Search Test</Text>\n          <TextInput placeholder='Search' onChangeText={text => this.setState({ searchText: text })} style={{ height: 56, justifyContent: 'center', borderColor: '#ccc', borderWidth: 2, padding: 5, borderRadius: 8, marginTop: 5 }}></TextInput>\n        </View>\n\n        <View style={{ height: 80, justifyContent: 'center', borderColor: '#ccc', borderWidth: 2, padding: 5, borderRadius: 8, marginTop: 15, marginBottom: 15 }}>\n          <Text>Searched text </Text>\n          <Text >{this.state.searchText}</Text>\n        </View>\n\n        <View>\n          <Text style={styles.lableText}>Message Box</Text>\n          <TextInput placeholder='Search' onChangeText={text => this.setState({ searchText: text })} style={{ height: 56, justifyContent: 'center', borderColor: '#ccc', borderWidth: 2, padding: 5, borderRadius: 8, marginTop: 5 }}></TextInput>\n        </View>\n        <Calendar\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n          minDate={'2012-05-10'}\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n          maxDate={'2022-05-30'}\n          // Handler which gets executed on day press. Default = undefined\n          onDayPress={day => {\n            console.log('selected day', day);\n          }}\n          markedDates={{\n            '2012-05-16': { selected: true, marked: true, selectedColor: 'blue' },\n            '2012-05-17': { marked: true },\n            '2012-05-18': { marked: true, dotColor: 'red', activeOpacity: 0 },\n            '2012-05-19': { disabled: true, disableTouchEvent: true }\n          }}\n          // Handler which gets executed on day long press. Default = undefined\n          onDayLongPress={day => {\n            console.log('selected day', day);\n          }}\n          // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n          monthFormat={'yyyy MM'}\n          // Handler which gets executed when visible month changes in calendar. Default = undefined\n          onMonthChange={month => {\n            console.log('month changed', month);\n          }}\n          // Hide month navigation arrows. Default = false\n          hideArrows={true}\n          // Replace default arrows with custom ones (direction can be 'left' or 'right')\n          renderArrow={direction => <Arrow />}\n          // Do not show days of other months in month page. Default = false\n          hideExtraDays={true}\n          // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\n          // day from another month that is visible in calendar page. Default = false\n          disableMonthChange={true}\n          // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\n          firstDay={1}\n          // Hide day names. Default = false\n          hideDayNames={true}\n          // Show week numbers to the left. Default = false\n          showWeekNumbers={true}\n          // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n          onPressArrowLeft={subtractMonth => subtractMonth()}\n          // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n          onPressArrowRight={addMonth => addMonth()}\n          // Disable left arrow. Default = false\n          disableArrowLeft={true}\n          // Disable right arrow. Default = false\n          disableArrowRight={true}\n          // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n          disableAllTouchEventsForDisabledDays={true}\n          // Replace default month and year title with custom one. the function receive a date as parameter\n          renderHeader={date => {\n            /*Return JSX*/\n          }}\n          // Enable the option to swipe between months. Default = false\n          enableSwipeMonths={true}\n        />\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 15\n  },\n  lableText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  clickButton: {\n    backgroundColor: '#FFA978',\n    height: 56,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#fff'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}